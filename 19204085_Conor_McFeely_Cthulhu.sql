DROP DATABASE School_Cthulhu;
CREATE DATABASE School_Cthulhu;
USE School_Cthulhu;

# Create the Department table
CREATE TABLE DEPARTMENT(
	DEPARTMENT_ID INT PRIMARY KEY,
	DEPARTMENT_NAME VARCHAR(50));

# Create the study Stream table
CREATE TABLE STREAM(
	STREAM_ID INT Auto_Increment PRIMARY KEY,
	STREAM_NAME VARCHAR(30),
	DEPARTMENT_ID INT,
	FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID));

# Create the Student table
CREATE TABLE STUDENT(
	STUDENT_ID INT Auto_Increment PRIMARY KEY,
	STUDENT_NAME VARCHAR(30),
	GPA FLOAT,
	STREAM_ID INT,
	FOREIGN KEY (STREAM_ID) REFERENCES STREAM(STREAM_ID));

# Create the Professor table
CREATE TABLE PROFESSOR(
	PROFESSOR_ID INT Auto_Increment PRIMARY KEY,
	PROFESSOR_NAME VARCHAR(30),
	DEPARTMENT_ID INT,
	FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID));

# Create a table that holds all the different types of projects and the the professor of that subject
CREATE TABLE PROJECTS(
	PROJECT_ID INT Auto_Increment PRIMARY KEY,
	PROJECT_TITLE VARCHAR(100) UNIQUE,
	PROFESSOR_ID INT,
	FOREIGN KEY (PROFESSOR_ID) REFERENCES PROFESSOR(PROFESSOR_ID));

# Create the Project Preferences table which will hold the preference of each student
CREATE TABLE PROJECT_PREFERENCES(
	PREFERENCE_ID INT Auto_Increment PRIMARY KEY,
	STUDENT_ID INT,
	PROJECTS_ID INT,
	FOREIGN KEY (PROJECTS_ID) REFERENCES PROJECTS(PROJECT_ID),
	FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID));

# Create the Allocation table
CREATE TABLE ALLOCATION(
	ALLOCATION_ID INT Auto_Increment PRIMARY KEY,
	All_PREFERENCE_ID INT,
	FOREIGN KEY (All_PREFERENCE_ID) REFERENCES PROJECT_PREFERENCES(PREFERENCE_ID));

# Inserting Department information
INSERT INTO DEPARTMENT VALUES (1,'Teachers of Cthulhu Studies');
INSERT INTO DEPARTMENT VALUES (2, 'Teachers of Cthulhu & Dagon Studies') ;

# Inserting study stream information
INSERT INTO STREAM VALUES (1, 'Cthulhu Studies',1);
INSERT INTO STREAM VALUES (2,'Cthulhu & Dagon Studies',2);

# Inserting the student information
INSERT INTO STUDENT VALUES (1 ,'Bob Marley', 4.2,1);
INSERT INTO STUDENT VALUES (2,'John Stockton',3.2,2);
INSERT INTO STUDENT VALUES (3, 'Michael Jordan',3.0,2);
INSERT INTO STUDENT VALUES (4,'Michael Bolton', 2.0, 1);
INSERT INTO STUDENT VALUES (5, 'George Best', 1.8, 2);
INSERT INTO STUDENT VALUES (6, 'Chris Webber', 3.2,1);
INSERT INTO STUDENT VALUES (7, 'Allen Iverson', 2.6, 1);
INSERT INTO STUDENT VALUES (8,'Zion Williamson', 4.0, 2);
INSERT INTO STUDENT VALUES (9, 'Reggie Miller', 3.4, 2);
INSERT INTO STUDENT VALUES (10, 'Charles Barkley', 3.6, 1);
INSERT INTO STUDENT VALUES(11, 'LeBron James', 2.6, 2);
INSERT INTO STUDENT VALUES (12, 'Kevin Durant', 3.0, 1);
INSERT INTO STUDENT VALUES (14, 'Yao Ming', 3.8, 1);
INSERT INTO STUDENT VALUES (13, 'Steven Francis', 3.4, 2);
INSERT INTO STUDENT VALUES (15, 'Gilbert Arena', 2.8, 2);

# Inserting the professors information and the department they teach in
INSERT INTO PROFESSOR VALUES (1, 'Dr Google Chrome', 2);
INSERT INTO PROFESSOR VALUES (2, 'Dr Java Eclipse', 1);
INSERT INTO PROFESSOR VALUES (3, 'Pr Yoko Nakamura', 2);
INSERT INTO PROFESSOR VALUES (4, 'Pr Stephen Chambers', 1);
INSERT INTO PROFESSOR VALUES (5, 'Pr Martin Adams', 1);
INSERT INTO PROFESSOR VALUES (6, 'Dr Hugh Larsson', 2);

# Insert all the projects available and the professor who will be overlooking it
INSERT INTO PROJECTS VALUES (1, 'Difference between CS & DS',1);
INSERT INTO PROJECTS VALUES (2, 'Cthulhu skiing apps', 2);
INSERT INTO PROJECTS VALUES (3, 'Dagan Marathon app', 3);
INSERT INTO PROJECTS VALUES (4, 'Eldritch Fitness monitor', 1);
INSERT INTO PROJECTS VALUES (5, 'Water resistant laptops', 3);
INSERT INTO PROJECTS VALUES  (6, 'What even is CS',4);
INSERT INTO PROJECTS VALUES (7, 'What even is DS', 5);
INSERT INTO PROJECTS VALUES (8, 'Where is Miskatonic', 5);
INSERT INTO PROJECTS VALUES (9, 'Future of Quarantine', 4);
INSERT INTO PROJECTS VALUES (10, 'One plus', 6);
INSERT INTO PROJECTS VALUES (11, 'iPhone', 6);
INSERT INTO PROJECTS VALUES (12, 'Gamestation', 1);
INSERT INTO PROJECTS VALUES (13, 'Playstation', 2);
INSERT INTO PROJECTS VALUES (14, 'Huawei', 3);
INSERT INTO PROJECTS VALUES (15, 'Skullcandy', 4);
INSERT INTO PROJECTS VALUES (16, 'Peroni', 3);
INSERT INTO PROJECTS VALUES (17, 'Moretti', 6);
INSERT INTO PROJECTS VALUES (18, 'Asahi', 5);
INSERT INTO PROJECTS VALUES (19, 'Forst', 2);
INSERT INTO PROJECTS VALUES (20, 'The Return', 4);
INSERT INTO PROJECTS VALUES (21, 'Sour Patch kids', 5);
INSERT INTO PROJECTS VALUES (22, 'Chocolate Twirls', 4);
INSERT INTO PROJECTS VALUES (23, 'Toyota Corolla', 3);
INSERT INTO PROJECTS VALUES (24, 'State Street', 1);
INSERT INTO PROJECTS VALUES (25, 'Alexion Pharma', 6);

# Inserting the project preferences for each student, FK for student Id and FK for the projects available
INSERT INTO PROJECT_PREFERENCES VALUES (1, 1, 1);
INSERT INTO PROJECT_PREFERENCES VALUES (2, 1, 2);
INSERT INTO PROJECT_PREFERENCES VALUES (3, 1, 12);
INSERT INTO PROJECT_PREFERENCES VALUES (4,1,23);
INSERT INTO PROJECT_PREFERENCES VALUES (5, 2, 25);
INSERT INTO PROJECT_PREFERENCES VALUES (6, 2, 2);
INSERT INTO PROJECT_PREFERENCES VALUES (7, 2, 18);
INSERT INTO PROJECT_PREFERENCES VALUES (8, 3, 24);
INSERT INTO PROJECT_PREFERENCES VALUES (9, 4, 13);
INSERT INTO PROJECT_PREFERENCES VALUES (10, 4, 17);
INSERT INTO PROJECT_PREFERENCES VALUES (11, 4, 14);
INSERT INTO PROJECT_PREFERENCES VALUES (12, 4, 6);
INSERT INTO PROJECT_PREFERENCES VALUES (13, 5, 3);
INSERT INTO PROJECT_PREFERENCES VALUES (14, 5, 4);
INSERT INTO PROJECT_PREFERENCES VALUES (15, 5, 5);
INSERT INTO PROJECT_PREFERENCES VALUES (16, 6, 6);
INSERT INTO PROJECT_PREFERENCES VALUES (17, 7, 8);
INSERT INTO PROJECT_PREFERENCES VALUES (18, 7, 9);
INSERT INTO PROJECT_PREFERENCES VALUES (19, 8, 7);
INSERT INTO PROJECT_PREFERENCES VALUES (20, 8, 10);
INSERT INTO PROJECT_PREFERENCES VALUES (21, 9, 12);
INSERT INTO PROJECT_PREFERENCES VALUES (22, 9, 13);
INSERT INTO PROJECT_PREFERENCES VALUES (23, 9, 11);
INSERT INTO PROJECT_PREFERENCES VALUES (24, 10, 20);
INSERT INTO PROJECT_PREFERENCES VALUES (25, 10, 14);
INSERT INTO PROJECT_PREFERENCES VALUES (26, 11, 15);
INSERT INTO PROJECT_PREFERENCES VALUES (27, 11, 16);
INSERT INTO PROJECT_PREFERENCES VALUES (28, 11, 19);
INSERT INTO PROJECT_PREFERENCES VALUES (29, 12, 17);
INSERT INTO PROJECT_PREFERENCES VALUES (30, 13, 18);
INSERT INTO PROJECT_PREFERENCES VALUES (31, 13, 23);
INSERT INTO PROJECT_PREFERENCES VALUES (32, 13, 24);
INSERT INTO PROJECT_PREFERENCES VALUES (33, 14, 20);
INSERT INTO PROJECT_PREFERENCES VALUES (34, 14, 25);
INSERT INTO PROJECT_PREFERENCES VALUES (35, 15, 8);
INSERT INTO PROJECT_PREFERENCES VALUES (36, 15, 24);

# Manually inserting the allocations into the allocations table, allocation ID and
INSERT INTO ALLOCATION VALUES (1, 1);
INSERT INTO ALLOCATION VALUES (2, 2);
INSERT INTO ALLOCATION VALUES (3, 3);
INSERT INTO ALLOCATION VALUES (4, 4);
INSERT INTO ALLOCATION VALUES (5, 5);
INSERT INTO ALLOCATION VALUES (6, 6);
INSERT INTO ALLOCATION VALUES (7, 7);
INSERT INTO ALLOCATION VALUES (8, 8);
INSERT INTO ALLOCATION VALUES (9, 9);
INSERT INTO ALLOCATION VALUES (10, 10);
INSERT INTO ALLOCATION VALUES (11, 11);
INSERT INTO ALLOCATION VALUES (12, 12);
INSERT INTO ALLOCATION VALUES (13, 12);
INSERT INTO ALLOCATION VALUES (14, 14);
INSERT INTO ALLOCATION VALUES (15, 15);
INSERT INTO ALLOCATION VALUES (16, 16);
INSERT INTO ALLOCATION VALUES (17, 17);
INSERT INTO ALLOCATION VALUES (18, 18);
INSERT INTO ALLOCATION VALUES (19, 19);
INSERT INTO ALLOCATION VALUES (20, 20);
INSERT INTO ALLOCATION VALUES (21, 21);
INSERT INTO ALLOCATION VALUES (22, 22);
INSERT INTO ALLOCATION VALUES (23, 23);
INSERT INTO ALLOCATION VALUES (24, 24);
INSERT INTO ALLOCATION VALUES (25, 25);
INSERT INTO ALLOCATION VALUES (26, 26);
INSERT INTO ALLOCATION VALUES (27, 27);
INSERT INTO ALLOCATION VALUES (28, 28);
INSERT INTO ALLOCATION VALUES (29, 29);
INSERT INTO ALLOCATION VALUES (30, 30);
INSERT INTO ALLOCATION VALUES (31, 31);
INSERT INTO ALLOCATION VALUES (32, 32);
INSERT INTO ALLOCATION VALUES (33, 33);
INSERT INTO ALLOCATION VALUES (34, 34);
INSERT INTO ALLOCATION VALUES (35, 35);
INSERT INTO ALLOCATION VALUES (36, 36);

#/*************************/ VIEWS  /*************************/

# View 1
DROP VIEW `school_cthulhu`.`MaxGPAOwnerInStream`;
CREATE VIEW `school_cthulhu`.`MaxGPAOwnerInStream` AS
(SELECT student.STUDENT_NAME, MAX(student.GPA), stream.STREAM_NAME
FROM school_cthulhu.student
INNER JOIN school_cthulhu.stream ON (student.STREAM_ID = stream.STREAM_ID)
GROUP BY stream.STREAM_NAME)
ORDER BY 'MAX(student.GPA)' DESC;
SELECT * FROM `school_cthulhu`.`MaxGPAOwnerInStream`;

# View 2
DROP VIEW `school_cthulhu`.`StudentsProjectsManageProfessor`;
CREATE VIEW `school_cthulhu`.`StudentsProjectsManageProfessor` AS
(SELECT student.GPA, student.STUDENT_NAME, professor.PROFESSOR_NAME
FROM school_cthulhu.projects
INNER JOIN school_cthulhu.professor ON (projects.PROFESSOR_ID = professor.PROFESSOR_ID)
INNER JOIN school_cthulhu.project_preferences
ON (project_preferences.PROJECTS_ID = projects.PROJECT_ID)
INNER JOIN school_cthulhu.student
ON (project_preferences.STUDENT_ID = student.STUDENT_ID));

SELECT * from `school_cthulhu`.`StudentsProjectsManageProfessor`;

# View 3
DROP VIEW `school_cthulhu`.`StudentCountForStream`;
CREATE VIEW `school_cthulhu`.`StudentCountForStream` AS
(SELECT COUNT(student.STUDENT_NAME), stream.STREAM_NAME
FROM school_cthulhu.student
INNER JOIN school_cthulhu.stream ON (student.STREAM_ID = stream.STREAM_ID)
GROUP BY stream.STREAM_ID, stream.STREAM_NAME);

SELECT * FROM `school_cthulhu`.`StudentCountForStream`;

# View 4
DROP VIEW `school_cthulhu`.`StreamGPAAVERAGERoundfortwoDigits`;
CREATE VIEW `school_cthulhu`.`StreamGPAAVERAGERoundfortwoDigits`AS
(SELECT stream.STREAM_NAME, ROUND( AVG(student.GPA),2) AS GPAaverage
FROM school_cthulhu.student
INNER JOIN school_cthulhu.stream ON (student.STREAM_ID = stream.STREAM_ID)
GROUP BY stream.STREAM_NAME);
SELECT * FROM `school_cthulhu`.`StreamGPAAVERAGERoundfortwoDigits`;

# View 5
DROP VIEW `school_cthulhu`.`SeparateFirstNAmeAndLastNameOrderByLastName`;
CREATE VIEW `school_cthulhu`.`SeparateFirstNAmeAndLastNameOrderByLastName` AS
( SELECT SUBSTRING_INDEX(STUDENT_NAME," ",1) AS FirstName, SUBSTRING_INDEX(STUDENT_NAME," ",-1) AS LastName , stream.STREAM_NAME
FROM school_cthulhu.student
INNER JOIN school_cthulhu.stream ON (student.STREAM_ID = stream.STREAM_ID)
ORDER BY SUBSTRING_INDEX(STUDENT_NAME," ",-1) DESC);

SELECT * FROM `school_cthulhu`.`SeparateFirstNAmeAndLastNameOrderByLastName`;

# View 6
DROP VIEW `school_cthulhu`.`SeparateProfessor`;
CREATE VIEW `school_cthulhu`.`SeparateProfessor` AS
SELECT SUBSTRING_INDEX( SUBSTRING_INDEX(professor.PROFESSOR_NAME," ",2)," ",1) AS Title,
SUBSTRING_INDEX( SUBSTRING_INDEX(professor.PROFESSOR_NAME," ",2)," ",-1) AS FirstNAme,
SUBSTRING_INDEX(professor.PROFESSOR_NAME," ", -1) AS lastName,
DEPARTMENT.DEPARTMENT_NAME
FROM school_cthulhu.professor
LEFT JOIN school_cthulhu.DEPARTMENT ON (DEPARTMENT.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID)
ORDER BY SUBSTRING_INDEX(PROFESSOR_NAME," ",-1) DESC;

SELECT * FROM `school_cthulhu`.`SeparateProfessor`;

#/******************/ Procedural Elements  /******************/

# Trigger 1
DROP TRIGGER streamTrigger;
DELIMITER //
CREATE TRIGGER streamTrigger BEFORE INSERT ON STREAM
FOR EACH ROW
BEGIN
IF (new.department_id not in (new.stream_id)) then
signal sqlstate '02000';
END IF;
IF (new.stream_id not in (1,2)) then
signal sqlstate '02000';
END IF;
IF (new.stream_name not in ('Cthulhu Studies', 'Cthulhu & Dagon Studies')) then
signal sqlstate '02000';
END IF;
END //
DELIMITER ;

# Trigger 2
DROP TRIGGER check_GPA;
CREATE TRIGGER check_GPA BEFORE INSERT ON STUDENT
FOR EACH ROW
BEGIN
IF NEW.GPA  IS NULL THEN
SET NEW.GPA = 3.0;
END IF;
END;

DROP TRIGGER check_null_Professor1;
CREATE TRIGGER check_null_Professor1 BEFORE INSERT ON PROFESSOR
FOR EACH ROW
BEGIN
IF NEW.PROFESSOR_NAME IS NULL THEN
SET NEW.PROFESSOR_NAME = 'Awaiting Professor details';
END IF;
END;

# Trigger 3
DROP TRIGGER professor_projects_limit;
delimiter //
CREATE TRIGGER professor_projects_limit
BEFORE INSERT ON projects
FOR EACH ROW
BEGIN
DECLARE size INT;
SET size = (select count(*) AS total_proj FROM projects GROUP BY professor_id HAVING professor_id = new.professor_id);
IF size > 5
THEN
SIGNAL SQLSTATE '12345'
SET MESSAGE_TEXT = 'A professor can only concentrate on atmost five projects';
END IF;
END;

#/*************************/ QUERIES /*************************/

# Query 1
SELECT STUDENT_ID, STUDENT_NAME, GPA, STREAM_NAME
    FROM STUDENT, STREAM
WHERE STUDENT.STREAM_ID = STREAM.STREAM_ID AND STREAM_NAME = 'Cthulhu Studies'
ORDER BY GPA DESC;
SELECT STUDENT_ID, STUDENT_NAME, GPA, STREAM_NAME
    FROM STUDENT, STREAM
WHERE STUDENT.STREAM_ID = STREAM.STREAM_ID AND STREAM_NAME = 'Cthulhu & Dagon Studies'
ORDER BY GPA DESC;

# Query 2
SELECT STUDENT_ID, STUDENT_NAME, STREAM.STREAM_NAME
FROM STUDENT, STREAM
WHERE STUDENT.STREAM_ID = STREAM.STREAM_ID AND STREAM_NAME = 'Cthulhu Studies';
SELECT STUDENT_ID, STUDENT_NAME, STREAM.STREAM_NAME
FROM STUDENT, STREAM
WHERE STUDENT.STREAM_ID = STREAM.STREAM_ID AND STREAM_NAME = 'Cthulhu & Dagon Studies';

# Query 3
SELECT s.STUDENT_ID,s.STUDENT_NAME, s.GPA, p.PROJECT_TITLE
FROM PROJECT_PREFERENCES t1
INNER join STUDENT s on s.STUDENT_ID = t1.STUDENT_ID
INNER join PROJECTS p on p.PROJECT_ID = t1.PROJECTS_ID;

# Query 4
SELECT p.PROJECT_TITLE, PROJECT_ID, COUNT(PREFERENCE_ID) AS Popular_preference
FROM PROJECT_PREFERENCES t1
INNER join PROJECTS p on p.PROJECT_ID = t1.PROJECTS_ID
GROUP BY PROJECT_TITLE
ORDER BY Popular_preference DESC ;

# Query 5
SELECT DISTINCT(ST.STREAM_NAME), S.STUDENT_ID,S.STUDENT_NAME, P1.PROJECT_TITLE,prof.PROFESSOR_NAME
FROM project_preferences t1
INNER JOIN STUDENT S ON S.STUDENT_ID = t1.STUDENT_ID
INNER JOIN PROJECTS P1 ON P1.PROJECT_ID = t1.PROJECTS_ID
INNER JOIN PROFESSOR prof ON prof.PROFESSOR_ID = P1.PROFESSOR_ID
INNER JOIN STREAM ST ON ST.STREAM_ID = S.STREAM_ID;